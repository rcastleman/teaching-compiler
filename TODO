
ISA:
[x] decide isa
[x] implement types for representing isa
[x] implement interpreter for isa
[x] implement display for isa

Lang
[x] decide language features
[x] implement AST
[x] implement compiler
[x] implement parser for source lang
[x] test compiler

[x] display for all exceptions

[x] implement repl
[x] implement run-file
[x] implement compile-to-file
[x] implement run-rasm

[x] check type annotations on most things
[x] more compiler tests
[x] improve current compiler implementation
[x] demo / student implementations
[x] docs


============== Architecture: ==============
answer register:
  rans

stack pointer:
  rsp

instruction pointer:
  rip

and a stack

============== ISA: ==============
Operands:
  immediate: eg, 2
  register: eg, rans
  stack offset: eg, [rsp + 2]

(following convention of: <instr> <src>, <dest>)
Instructions:
  mov op, op
  add op, op
  sub op, op
  mul op, op
  cmp op, op
  label:
  jmp lbl
  je lbl
  jne lbl
  call lbl
  ret

============== Language features: ==============
(add1 e)
(sub1 e)
(+ l r)
(- l r)
(* l r)
(= l r)
(let (id v) b)
(if c t e)
(def (f args) body)
(f args)