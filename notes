
source language program
5

interp(5) -> 5
compile([], 5) -> program

program we generate has property:
    - when it finishes running, 5 is in rans

Abstract syntax: source language
100             --> Num(100)
(+ 1 2)         --> Plus(Num(1), Num(2))
(sub1 (add1 7)) --> Sub1(Add1(Num(7)))

5 --> mov 5, rans

5/29:

source:
"(+ 1 2)"

parser for the src language:
Plus(Num(1), Num(2))

compiler:
Mov(Num(1), Rans()),
Add(Num(2), Rans())

--> rasm VM, runs it

--> write to file
"mov 1, rans
add 2, rans"


--------

"mov 5, rans"  --> Mov(Imm(5), Rans())
"add 10, rans" --> Add(Imm(10), Rans())
"sub 5, rsp"  --> Sub(Imm(5), Rsp())
"mov 10, [rsp + 2]" --> Mov(Imm(10), StackOff(2))


(sub1 5) --> 4
(add1 10) --> 11
(print 41) --> 41


switch cond {
    case 1:
        sadlkfjasdlkf
    case 2:

    case 3:

    default:
}



(let (x 1)
    (let (x 2)
        (+ x 5))


def f(x, y):
    return 2 * (x + y)

f(3, 7)


"top-level"
-->
    a()
    x=5
    f=8
    g=9
    --> b()
        y=6
        --> c() 
            return 1
        <--
        return y
    <--
    return x
<--

0: | nothing | <--- A's stack frame begins
1: | 5 |
2: | 8 |
3: | 9 |
4: |   | <--- B's stack frame begins (rsp)
5: | 6 | [rsp + 1]
6: |   | <--- C's stack frame begins
7: |   | 
8: |   | 

--------------

a()

def a()
    x = 5
    b()
    return x

def b():
    y = 6
    c()
    return y

def c(): 
    return 1
